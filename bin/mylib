#!/usr/bin/env bash
## coding=utf-8
##==================================----------==================================
## FILE: mylib
## MYPG: abldg, https://github.com/abldg
## LSCT: 2025-04-14 15:50:29
## VERS: 0.3
##==================================----------==================================
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mt_thzstep() {
  [ X0 = X${SW_DBGTHIZ:-0} ] && return
  ##arg1: message-to-tip-out, [optional]
  {
    local ci=($(caller 0))
    local msg="[${CBLU}${ci[2]}$CEND,${CGRN}${ci[1]}$CEND,${CYLW}${ci[0]}$CEND]"
    printf "====>${msg}${1:+ [${CPLP}$1${CEND}]}<====\n"
  } 2>/dev/null
}
##UNITTESTS##
# mt_thzstep "this-is-a-test-message"
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mt_genpswd() {
  ##arg1: length of new password, default is 6, [optional]
  local rlen=${1:-6} rsrc=/dev/urandom
  local cset='12345!@#%qwertQWERTasdfgASDFGzxcvbZXCVB'
  [ ! -e $rsrc ] && rsrc=/dev/random
  tr -dc $cset <${rsrc} | head -c${rlen} && echo
}
##UNITTESTS##
# mt_genpswd #${1:-12}

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# mt_unset_proxyenvs() {
#   unset -v http_proxy https_proxy no_proxy
#   unset -v HTTP_PROXY HTTPS_PROXY NO_PROXY
# }

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mt_update_envfile() {
  mt_thzstep
  {
    set -- .env $@
    GPROMPTS+=(
      ###
      [cn_slu_must_notempty]="[FATAL] 订阅链接不能为空!!!"
      [en_slu_must_notempty]="[FATAL] subscription link url must not empty !!!"
      ###
      [cn_slu_needavalidurl]="[FATAL] 合法的订阅链接以http开头!!!"
      [en_slu_needavalidurl]="[FATAL] a valid subscription link url begins with http !!!"
      ###
      [cn_slu_start_update]="开始更新 ${CBLU}${1}${CYAN} ..."
      [en_slu_start_update]="begin to update ${CBLU}${1}${CYAN}..."
      ###
      [cn_slu_show_secret]="访问密码即将更新${2:+为 [${CRED}${2}${CGRN}]}"
      [en_slu_show_secret]="update password of webpages to${2:+ [${CRED}${2}${CGRN}]}"
      ###
      [cn_slu_show_lnkurl]="订阅链接即将更新${3:+为 [${CRED}${3}${CGRN}]}"
      [en_slu_show_lnkurl]="update subscription url to${3:+ [${CRED}${3}${CGRN}]}"
    )
  } 2>/dev/null
  ##////////////////////////////////////////////////////////////////////////////
  if [[ X0 == X${#3} ]]; then
    _red slu_must_notempty
  else
    if [[ $3 != @(http|https)://* ]]; then
      _red slu_needavalidurl
    fi
    _green slu_show_lnkurl
    _green slu_show_secret
  fi
  _cyan slu_start_update
  sed -r -i \
    -e "/^#?C4L_LNKURL=/s|^.*$|C4L_LNKURL=\"${3}\"|" \
    -e "/^#?C4L_SECRET=/s|^.*$|C4L_SECRET=\"${2}\"|" \
    $1
  grep --color=auto -E "^C4L_(LNKURL|SECRET)=" $1
}

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mt_update_files() {
  find etc -name "c4l.yaml" -atime +10 -exec rm {} \;
  {
    set -- etc/c4l.yaml
    GPROMPTS+=(
      ###
      [cn_ucfg_notneedupt]="配置文件 ${CGRN}${1}${CBLU} 无需更新"
      [en_ucfg_notneedupt]="config ${CGRN}${1}${CBLU} already lastest, skip update"
      ###
      [cn_ucfg_doneupdate]="从订阅链接更新配置文件 ${CPLP}${1}"
      [en_ucfg_doneupdate]="update config ${CPLP}${1}${CYAN} from subscription link"
    )
  } 2>/dev/null
  ####//////////////////////////////////////////////////////////////////////////
  ###
  if [ -e $1 ]; then
    _blue ucfg_notneedupt
  else
    _cyan ucfg_doneupdate
    set -- ${C4L_LNKURL}
    xf_check_sbsurl_reachable ${1}
    xf_yamlfile_fetch_and_verify ${1}
  fi
  ###
  set -- /etc/profile.d/z99_linux_clash.sh
  if [ ! -e $1 ]; then
    {
      echo 'proxy_enable() {'
      echo '  export http_proxy=http://127.0.0.1:7890'
      echo '  export https_proxy=http://127.0.0.1:7890'
      echo '  export no_proxy=127.0.0.1,localhost'
      echo '  export HTTP_PROXY=http://127.0.0.1:7890'
      echo '  export HTTPS_PROXY=http://127.0.0.1:7890'
      echo '  export NO_PROXY=127.0.0.1,localhost'
      echo '  printf "\033[32m[√] proxy turn on\033[0m\n"'
      echo '}'
      echo '##'
      echo 'proxy_disable() {'
      echo '  unset -v http_proxy https_proxy no_proxy'
      echo '  unset -v HTTP_PROXY HTTPS_PROXY NO_PROXY'
      echo '  printf "\033[31m[×] proxy turn off\033[0m\n"'
      echo '}'
    } | sudo tee $1
  fi 2>/dev/null
}

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
xf_check_sbsurl_reachable() {
  {
    GPROMPTS+=(
      ###
      [cn_sblnk_selfname]="你的订阅链接"
      [en_sblnk_selfname]="your subscription link"
      ###
      [cn_sblnk_givetome]="[FATAL]: 请给出一个有效的订阅链接!!!"
      [en_sblnk_givetome]="[FATAL]: give me a valid subscription link!!!"
      ###
      [cn_sblnk_got_okay]="获取到的订阅地址: ${CBLU}有效${CGRN}"
      [en_sblnk_got_okay]="got a valid subscription link: ${CBLU}Okay${CGRN}"
      ###
      [cn_sblnk_reachble]="检查订阅链接是否可访问"
      [en_sblnk_reachble]="check the reachable of subscription link"
      ###
      [cn_sblnk_canreach]="${PFX4SUB}订阅链接可访问."
      [en_sblnk_canreach]="${PFX4SUB}subscription link can reach."
      ###
      [cn_sblnk_notreach]="${PFX4SUB}不可访问订阅链接,退出启动!!!"
      [en_sblnk_notreach]="${PFX4SUB}subscription link CANNOT reach, exit starting!!!"
    )
  } 2>/dev/null
  ####//////////////////////////////////////////////////////////////////////////
  mt_thzstep
  ####
  if [ "X" = "X$1" ] || [[ "$1" != @(http|https)://* ]]; then
    _red sblnk_givetome
  else
    _cyan sblnk_reachble
  fi 2>/dev/null
  ###1
  { local turl=$(x=${1##*://} && echo ${x%%/*}); } 2>/dev/null
  ping -c 1 $turl &>/dev/null
  ###2
  if [ $? -eq 0 ]; then
    command curl -o /dev/null -LksS --retry 5 -m 10 --connect-timeout 10 \
      -w "%{http_code}" $1 2>/dev/null | grep -Eq '^[23][0-9]{2}$'
    if [ $? -eq 0 ]; then
      _green sblnk_canreach
      return
    fi
  fi
  _red sblnk_notreach
}

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
xf_yamlfile_fetch_and_verify() {
  {
    GPROMPTS+=(
      ###
      [cn_fhyml_start_dl]="从订阅链接下载配置文件"
      [en_fhyml_start_dl]="begin to download config from subscription link"
      ###
      [cn_fhyml_dld_okay]="${PFX4SUB}配置文件下载成功,${CYAN}检查是否符合标准"
      [en_fhyml_dld_okay]="${PFX4SUB}okay done download config, VERIFY it now"
      ###
      [cn_fhyml_dld_fail]="${PFX4SUB}配置文件下载失败,退出启动!!!"
      [en_fhyml_dld_fail]="${PFX4SUB}failed to download config, exit starting!!!"
      ###
      [cn_vfyml_meet_std]="${PFX4SUB}订阅内容符合clash标准"
      [en_vfyml_meet_std]="${PFX4SUB}config is meet the Clash-Standard"
      ###
      [cn_vfyml_nmet_std]="${PFX4SUB}订阅内容不符合clash标准,退出启动!!!"
      [en_vfyml_nmet_std]="${PFX4SUB}config NOT meet the Clash-Standard, exit starting!!!"
    )
  } 2>/dev/null
  ####//////////////////////////////////////////////////////////////////////////
  xf_yaml_verify() {
    local okl=
    if [ -s $1 ]; then
      okl=$(awk '/^(proxies|proxy-groups|rules):/' $1 | wc -l)
      [ X3 != X$okl ] && {
        base64 -d $1 >tmpfile
        if [ $? -eq 0 ]; then
          rm -f $1
          set -- tmpfile
          [ -s $1 ] && {
            okl=$(awk '/^(proxies|proxy-groups|rules):/' $1 | wc -l)
          }
        fi
      }
    fi
    [ X3 != X$okl ] && _red vfyml_nmet_std
    ##
    _green vfyml_meet_std
    {
      mkdir etc 2>/dev/null
      set -- $1 etc/c4l.yaml ${C4L_MGRURL:-0.0.0.0:9090}
      mv $1 $2
      sed -ri -e '/^#!MANAGED-CONFIG/d;/^allow-lan: /s@: false@: true@' \
        -e '/^external-controller: /s|: .*|: '${3}'|' $2
    } #2>/dev/null
  }
  ####//////////////////////////////////////////////////////////////////////////
  mt_thzstep
  set -- ${1} cfg_$(date +%N).temp
  _cyan fhyml_start_dl
  local copts=(-LksS --retry 5 -m 10 --connect-timeout 10 -o $2 ${1})
  command curl ${copts[@]} 2>/dev/null
  if [ $? -ne 0 ]; then
    _red fhyml_dld_fail
  fi
  _green fhyml_dld_okay
  xf_yaml_verify $2
}

###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
  ## [TIPBSE] ##
  mt_getprompt() {
    local cc= bk="${*}" zl="${SW_THZLANG:-cn}"
    case ${CLR} in
    cred | CRED | [rR] | red) cc="${CRED}" && red_exit=1 ;;
    cblu | CBLU | [bB] | blue) cc="${CBLU}" ;;
    cyan | CYAN | [cC] | cyan) cc="${CYAN}" ;;
    cgrn | CGRN | [gG] | green) cc="${CGRN}" ;;
    cplp | CPLP | [pP] | purple) cc="${CPLP}" ;;
    cylw | CYLW | [yY] | yellow) cc="${CYLW}" ;;
    esac
    ##
    if [[ "X${bk//[a-z0-9_]/}" = "X" ]]; then
      [[ ${bk}X == @(cn|en|jp|fr|ru|de)_*X ]] && bk="${bk#*_}"
      set -- "${GPROMPTS[${zl}_$bk]}"
      [ ${#1} -ge 1 ] && bk="${*}"
    fi
    printf -- "${cc}${bk}${CEND}"
    ##
    [ X${SW_NEWLINE:-1} = X1 ] && echo
    [ X1 = X${red_exit} ] && [[ X${0}Z != X*bashZ ]] && exit 1
  }
  ## [COLORS] ##
  mcary=(RED:"31;1" GRN:32 YLW:33 BLU:34 PLP:35 YAN:36 END:0)
  for x in ${mcary[@]}; do
    p=(${x//:/ }) && eval "export C${p[0]}='\e[${p[1]}m'"
  done
  for x in red blue cyan green purple yellow; do
    eval "_${x}(){ { CLR=${x} mt_getprompt \$@; } 2>/dev/null; }"
    # eval "_${x}(){ CLR=${x} mt_getprompt \$@; }"
  done
  unset -v x p mcary
  ##
  export PFX4SUB='@----> '
  declare -gA GPROMPTS=()
} 2>/dev/null
##TESTS##
# _green "just_a_test_message_for_invalid_keyword2"
# _red "just_a_test_message_for_invalid_keyword1"
# _blue "just_a_test_message_for_invalid_keyword2"

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
